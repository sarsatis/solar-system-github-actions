name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}     

jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - 18
          uses: actions/setup-node@v3
          with:
            node-version: 18

        # - name: Composite Action - Cache & Install NPM Packages
        #   uses: ./.github/custom-actions/npm-action
        #   with:
        #     path-of-folder: node_modules 

        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
           path: node_modules
           key: ubuntu-latest-node-modules-${{ hashFiles('package-lock.json') }}  

        - name: Install Dependencies
          run: npm install

        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test

        - name: Archive Test Result
          if:  always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
        name: Code Coverage
        # Below is configuration of job container and service container... 
        # Since we have used container image as node:18 we dont need a additional step to actions/setup-node@v3
        # In this 2 containers are spun up container to container comm happens with label i.e --name

        container: 
            image: node:18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options: 
                --name mongo
        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS Version - 18
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 18

        # - name: Composite Action - Cache & Install NPM Packages
        #   uses: ./.github/custom-actions/npm-action
        #   with:
        #     path-of-folder: node_modules

        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
           path: node_modules
           key: ubuntu-latest-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install

        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage

        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5


    # reports-s3:
    #   needs: [code-coverage, unit-testing]
    #   name: AWS S3 - Upload Reports
    #   runs-on: ubuntu-latest
    #   continue-on-error: true
    #   steps:
    #     - name: Download Mocha Test Artifact
    #       uses: actions/download-artifact@v3
    #       with:
    #         name: Mocha-Test-Result

    #     - name: Download Code Coverage Artifact
    #       uses: actions/download-artifact@v3
    #       with:
    #         name: Code-Coverage-Result

    #     - name: Merge Test Files
    #       run: |
    #         ls -ltr
    #         mkdir reports-${{ github.sha }}
    #         mv cobertura-coverage.xml reports-${{ github.sha }}/
    #         mv test-results.xml reports-${{ github.sha }}/
    #         ls -ltr reports-${{ github.sha }}/

    #     - name: Upload to AWS S3
    #       uses: jakejarvis/s3-sync-action@master
    #       with:
    #         args:  --follow-symlinks --delete
    #       env:
    #         AWS_S3_BUCKET: solar-system-reports-bucket
    #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #         AWS_REGION: 'us-east-1'                       
    #         SOURCE_DIR: 'reports-${{ github.sha }}'
    #         DEST_DIR: 'reports-${{ github.sha }}'

    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        permissions: 
           packages: write
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: GHCR Login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker Build For Testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d  \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP
            
            echo Testing Image URL using wget 
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: Container Registry Push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: |
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
             #  ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: docker
      runs-on: ubuntu-latest
      environment: 
        name: development
        url: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      outputs:
        APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      services:
        mongo-db:
          image: siddharth67/mongo-db:non-prod
          ports:
            - 27017:27017
      env:
        NAMESPACE: default
        REPLICAS: 1
        IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
        # INGRESS_IP:  ${{ env.INGRESS_IP }}
        MONGO_URI: 'mongodb://localhost:27017/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4
        
        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
             version: 'v1.26.0'

        - name: Set Kubeconfig file
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}

        - name: Fetch Kubernetes Cluster Details
          run: |
            kubectl version --short
            echo ---------------------------------------------------
            kubectl get nodes
            kubectl get ns
            kubectl get po

        # To save something in Environment variable
        # - name: Save Nginx Ingress Controller IP as a GITHUB Environment Variable
        #   run: |
        #    echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

        - name: Replace Token in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          


        - name: Check files
          run: |
              cat kubernetes/development/*.yaml
        
        - name: Create MongoDB Secret
          run: |
            kubectl -n ${{ env.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -

        - name: Deploy to Dev Env
          run: |
            kubectl apply -f kubernetes/development/

        - name: Set App Ingress Host URL
          id: set-ingress-host-address
          run: |
            echo "APP_INGRESS_HOST=Test" >> "$GITHUB_OUTPUT"

    #   uses: ./.github/workflows/8.reuse-deployment.yml
    #   secrets: 
    #     k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
    #     mongodb-password: ${{ secrets.MONGO_PASSWORD}}
    #   with:
    #     mongodb-uri: ${{ vars.MONGO_URI }}
    #     environment: development
    #     k8s-manifest-dir: kubernetes/development/

    dev-integration-testing:
        if: contains(github.ref, 'feature/')
        name: Dev Integration Testing
        needs: dev-deploy
        runs-on: ubuntu-latest
        steps:
          - name: Test URL Output using CURL and JQ
            env:
              URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
            run: |
              echo $URL
              echo "--------------------------------------------"
              
            #   curl https://$URL/live -s -k | jq -r .status | grep -i live

    prod-deploy:
      if: github.ref == 'refs/heads/master'
      needs: docker
      uses: ./.github/workflows/8.reuse-deployment.yml
      secrets: 
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb-password: ${{ secrets.MONGO_PASSWORD}}
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: development
        k8s-manifest-dir: kubernetes/production/
      
    prod-integration-testing:
        name: Prod Integration Testing
        if: github.ref == 'refs/heads/master'
        needs: prod-deploy
        runs-on: ubuntu-latest
        steps:
          - name: Test URL Output using CURL and JQ
            env:
              URL: ${{ needs.prod-deploy.outputs.application-url }}
            run: |
              echo $URL
              echo "--------------------------------------------"
              # curl https://$URL/live -s -k | jq -r .status | grep -i live

    # slack-notification:
    #   if: always()
    #   name: Slack Notification
    #   needs: [dev-integration-testing, prod-integration-testing]
    #   continue-on-error: true
    #   runs-on: ubuntu-latest
    #   steps:
    #   - uses: actions/checkout@v4
    #   - name: Slack Notification
    #     uses: rtCamp/action-slack-notify@v2
    #     env:
    #       SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    #       SLACK_CHANNEL: github-actions-channel-2
    #       SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
    #     #  SLACK_ICON: https://gitlab.com/sidd-harth/solar-system/-/raw/main/images/saturn.png
    #       SLACK_MESSAGE: ':hammer_and_wrench: Triggered by ${{github.actor}}'
    #       SLACK_TITLE: Information